{"ast":null,"code":"import _objectSpread from\"/Users/nataliasabadysh/Desktop/ReactLessons/lesson3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import jwt from\"jwt-simple\";var users=[];var SECRET=\"react_is_amazing\";export var signIn=function signIn(_ref){var email=_ref.email,password=_ref.password;return new Promise(function(resolve,reject){var user=users.find(function(user){return user.email===email;});setTimeout(function(){if(!user){reject({message:\"User does not exist!\"});return;}if(user.password!==password){reject({message:\"Invalid password!\"});return;}var tokenContent={name:user.name,email:user.email};user.jwt_token=jwt.encode(tokenContent,SECRET);resolve({user:{name:user.name,email:user.email,permissions:\"admin\"},token:user.jwt_token});},300);});};export var createUser=function createUser(credentials){return new Promise(function(resolve,reject){var user=users.find(function(user){return user.email===credentials.email;});setTimeout(function(){if(user)reject({message:\"User already exists!\"});var tokenContent={name:credentials.name,email:credentials.email,role:\"admin\"};var newUser=_objectSpread(_objectSpread({},credentials),{},{jwt_token:jwt.encode(tokenContent,SECRET)});users.push(newUser);resolve({user:{name:newUser.name,email:newUser.email,permissions:\"admin\"},token:newUser.jwt_token});},300);});};export var signOut=function signOut(){return new Promise(function(resolve){return setTimeout(function(){return resolve();},300);});};","map":{"version":3,"sources":["/Users/nataliasabadysh/Desktop/ReactLessons/lesson3/src/api/auth.js"],"names":["jwt","users","SECRET","signIn","email","password","Promise","resolve","reject","user","find","setTimeout","message","tokenContent","name","jwt_token","encode","permissions","token","createUser","credentials","role","newUser","push","signOut"],"mappings":"yKAAA,MAAOA,CAAAA,GAAP,KAAgB,YAAhB,CAEA,GAAMC,CAAAA,KAAK,CAAG,EAAd,CAEA,GAAMC,CAAAA,MAAM,CAAG,kBAAf,CAEA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,UAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,QAAV,MAAUA,QAAV,OACpB,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/B,GAAMC,CAAAA,IAAI,CAAGR,KAAK,CAACS,IAAN,CAAW,SAACD,IAAD,QAAUA,CAAAA,IAAI,CAACL,KAAL,GAAeA,KAAzB,EAAX,CAAb,CAEAO,UAAU,CAAC,UAAM,CACf,GAAI,CAACF,IAAL,CAAW,CACTD,MAAM,CAAC,CAAEI,OAAO,CAAE,sBAAX,CAAD,CAAN,CACA,OACD,CAED,GAAIH,IAAI,CAACJ,QAAL,GAAkBA,QAAtB,CAAgC,CAC9BG,MAAM,CAAC,CAAEI,OAAO,CAAE,mBAAX,CAAD,CAAN,CACA,OACD,CAED,GAAMC,CAAAA,YAAY,CAAG,CAAEC,IAAI,CAAEL,IAAI,CAACK,IAAb,CAAmBV,KAAK,CAAEK,IAAI,CAACL,KAA/B,CAArB,CAEAK,IAAI,CAACM,SAAL,CAAiBf,GAAG,CAACgB,MAAJ,CAAWH,YAAX,CAAyBX,MAAzB,CAAjB,CAEAK,OAAO,CAAC,CACNE,IAAI,CAAE,CACJK,IAAI,CAAEL,IAAI,CAACK,IADP,CAEJV,KAAK,CAAEK,IAAI,CAACL,KAFR,CAGJa,WAAW,CAAE,OAHT,CADA,CAMNC,KAAK,CAAET,IAAI,CAACM,SANN,CAAD,CAAP,CAQD,CAvBS,CAuBP,GAvBO,CAAV,CAwBD,CA3BD,CADoB,EAAf,CA8BP,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,WAAD,QACxB,IAAId,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/B,GAAMC,CAAAA,IAAI,CAAGR,KAAK,CAACS,IAAN,CAAW,SAACD,IAAD,QAAUA,CAAAA,IAAI,CAACL,KAAL,GAAegB,WAAW,CAAChB,KAArC,EAAX,CAAb,CAEAO,UAAU,CAAC,UAAM,CACf,GAAIF,IAAJ,CAAUD,MAAM,CAAC,CAAEI,OAAO,CAAE,sBAAX,CAAD,CAAN,CAEV,GAAMC,CAAAA,YAAY,CAAG,CACnBC,IAAI,CAAEM,WAAW,CAACN,IADC,CAEnBV,KAAK,CAAEgB,WAAW,CAAChB,KAFA,CAGnBiB,IAAI,CAAE,OAHa,CAArB,CAMA,GAAMC,CAAAA,OAAO,gCACRF,WADQ,MAEXL,SAAS,CAAEf,GAAG,CAACgB,MAAJ,CAAWH,YAAX,CAAyBX,MAAzB,CAFA,EAAb,CAKAD,KAAK,CAACsB,IAAN,CAAWD,OAAX,EAEAf,OAAO,CAAC,CACNE,IAAI,CAAE,CACJK,IAAI,CAAEQ,OAAO,CAACR,IADV,CAEJV,KAAK,CAAEkB,OAAO,CAAClB,KAFX,CAGJa,WAAW,CAAE,OAHT,CADA,CAMNC,KAAK,CAAEI,OAAO,CAACP,SANT,CAAD,CAAP,CAQD,CAxBS,CAwBP,GAxBO,CAAV,CAyBD,CA5BD,CADwB,EAAnB,CA+BP,MAAO,IAAMS,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SACrB,IAAIlB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CACvB,MAAOI,CAAAA,UAAU,CAAC,iBAAMJ,CAAAA,OAAO,EAAb,EAAD,CAAkB,GAAlB,CAAjB,CACD,CAFD,CADqB,EAAhB","sourcesContent":["import jwt from \"jwt-simple\";\n\nconst users = [];\n\nconst SECRET = \"react_is_amazing\";\n\nexport const signIn = ({ email, password }) =>\n  new Promise((resolve, reject) => {\n    const user = users.find((user) => user.email === email);\n\n    setTimeout(() => {\n      if (!user) {\n        reject({ message: \"User does not exist!\" });\n        return;\n      }\n\n      if (user.password !== password) {\n        reject({ message: \"Invalid password!\" });\n        return;\n      }\n\n      const tokenContent = { name: user.name, email: user.email };\n\n      user.jwt_token = jwt.encode(tokenContent, SECRET);\n\n      resolve({\n        user: {\n          name: user.name,\n          email: user.email,\n          permissions: \"admin\",\n        },\n        token: user.jwt_token,\n      });\n    }, 300);\n  });\n\nexport const createUser = (credentials) =>\n  new Promise((resolve, reject) => {\n    const user = users.find((user) => user.email === credentials.email);\n\n    setTimeout(() => {\n      if (user) reject({ message: \"User already exists!\" });\n\n      const tokenContent = {\n        name: credentials.name,\n        email: credentials.email,\n        role: \"admin\",\n      };\n\n      const newUser = {\n        ...credentials,\n        jwt_token: jwt.encode(tokenContent, SECRET),\n      };\n\n      users.push(newUser);\n\n      resolve({\n        user: {\n          name: newUser.name,\n          email: newUser.email,\n          permissions: \"admin\",\n        },\n        token: newUser.jwt_token,\n      });\n    }, 300);\n  });\n\nexport const signOut = () =>\n  new Promise((resolve) => {\n    return setTimeout(() => resolve(), 300);\n  });\n"]},"metadata":{},"sourceType":"module"}