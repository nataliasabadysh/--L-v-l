{"ast":null,"code":"var _jsxFileName = \"/Users/nataliasabadysh/Desktop/ReactLessons/lesson3/src/context/theme.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext(); // Provide Consumer\n\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n\n  const [theme, setTheme] = useState(\"light\");\n  const swithTheme = useCallback(property => {\n    if (property !== \"light\") {\n      setTheme(\"light\");\n    } else {\n      setTheme(\"dark\");\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      swithTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeProvider, \"t6Z6D4NV/92lT4wuC43jDn/aq2Q=\");\n\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/nataliasabadysh/Desktop/ReactLessons/lesson3/src/context/theme.js"],"names":["React","createContext","useState","useCallback","ThemeContext","ThemeProvider","children","theme","setTheme","swithTheme","property"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,WAAzC,QAA4D,OAA5D;;AAEA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,EAAlC,C,CAAsC;;AAE7C,OAAO,MAAMI,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,OAAD,CAAlC;AAEA,QAAMO,UAAU,GAAGN,WAAW,CAAEO,QAAD,IAAc;AAC3C,QAAIA,QAAQ,KAAK,OAAjB,EAA0B;AACxBF,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACD;AACF,GAN6B,EAM3B,EAN2B,CAA9B;AAQA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAA9B;AAAA,cACGH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhBM;;GAAMD,a;;KAAAA,a","sourcesContent":["import React, { createContext, useState, useCallback } from \"react\";\n\nexport const ThemeContext = createContext(); // Provide Consumer\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(\"light\");\n\n  const swithTheme = useCallback((property) => {\n    if (property !== \"light\") {\n      setTheme(\"light\");\n    } else {\n      setTheme(\"dark\");\n    }\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, swithTheme }}>\n      {children} \n    </ThemeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}