{"ast":null,"code":"import jwt from \"jwt-simple\";\nconst users = [];\nconst SECRET = \"react_is_amazing\";\nexport const signIn = ({\n  email,\n  password\n}) => new Promise((resolve, reject) => {\n  const user = users.find(user => user.email === email);\n  setTimeout(() => {\n    if (!user) {\n      reject({\n        message: \"User does not exist!\"\n      });\n      return;\n    }\n\n    if (user.password !== password) {\n      reject({\n        message: \"Invalid password!\"\n      });\n      return;\n    }\n\n    const tokenContent = {\n      name: user.name,\n      email: user.email\n    };\n    user.jwt_token = jwt.encode(tokenContent, SECRET);\n    resolve({\n      user: {\n        name: user.name,\n        email: user.email,\n        permissions: \"admin\"\n      },\n      token: user.jwt_token\n    });\n  }, 300);\n});\nexport const createUser = credentials => new Promise((resolve, reject) => {\n  const user = users.find(user => user.email === credentials.email);\n  setTimeout(() => {\n    if (user) reject({\n      message: \"User already exists!\"\n    });\n    const tokenContent = {\n      name: credentials.name,\n      email: credentials.email,\n      role: \"admin\"\n    };\n    const newUser = { ...credentials,\n      jwt_token: jwt.encode(tokenContent, SECRET)\n    };\n    users.push(newUser);\n    resolve({\n      user: {\n        name: newUser.name,\n        email: newUser.email,\n        permissions: \"admin\"\n      },\n      token: newUser.jwt_token\n    });\n  }, 300);\n});\nexport const signOut = () => new Promise(resolve => {\n  return setTimeout(() => resolve(), 300);\n});","map":{"version":3,"sources":["/Users/nataliasabadysh/Desktop/ReactLessons/lesson3/src/api/auth.js"],"names":["jwt","users","SECRET","signIn","email","password","Promise","resolve","reject","user","find","setTimeout","message","tokenContent","name","jwt_token","encode","permissions","token","createUser","credentials","role","newUser","push","signOut"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AAEA,MAAMC,KAAK,GAAG,EAAd;AAEA,MAAMC,MAAM,GAAG,kBAAf;AAEA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KACpB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,IAAI,GAAGR,KAAK,CAACS,IAAN,CAAYD,IAAD,IAAUA,IAAI,CAACL,KAAL,KAAeA,KAApC,CAAb;AAEAO,EAAAA,UAAU,CAAC,MAAM;AACf,QAAI,CAACF,IAAL,EAAW;AACTD,MAAAA,MAAM,CAAC;AAAEI,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAN;AACA;AACD;;AAED,QAAIH,IAAI,CAACJ,QAAL,KAAkBA,QAAtB,EAAgC;AAC9BG,MAAAA,MAAM,CAAC;AAAEI,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAN;AACA;AACD;;AAED,UAAMC,YAAY,GAAG;AAAEC,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAb;AAAmBV,MAAAA,KAAK,EAAEK,IAAI,CAACL;AAA/B,KAArB;AAEAK,IAAAA,IAAI,CAACM,SAAL,GAAiBf,GAAG,CAACgB,MAAJ,CAAWH,YAAX,EAAyBX,MAAzB,CAAjB;AAEAK,IAAAA,OAAO,CAAC;AACNE,MAAAA,IAAI,EAAE;AACJK,QAAAA,IAAI,EAAEL,IAAI,CAACK,IADP;AAEJV,QAAAA,KAAK,EAAEK,IAAI,CAACL,KAFR;AAGJa,QAAAA,WAAW,EAAE;AAHT,OADA;AAMNC,MAAAA,KAAK,EAAET,IAAI,CAACM;AANN,KAAD,CAAP;AAQD,GAvBS,EAuBP,GAvBO,CAAV;AAwBD,CA3BD,CADK;AA8BP,OAAO,MAAMI,UAAU,GAAIC,WAAD,IACxB,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,IAAI,GAAGR,KAAK,CAACS,IAAN,CAAYD,IAAD,IAAUA,IAAI,CAACL,KAAL,KAAegB,WAAW,CAAChB,KAAhD,CAAb;AAEAO,EAAAA,UAAU,CAAC,MAAM;AACf,QAAIF,IAAJ,EAAUD,MAAM,CAAC;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAN;AAEV,UAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAEM,WAAW,CAACN,IADC;AAEnBV,MAAAA,KAAK,EAAEgB,WAAW,CAAChB,KAFA;AAGnBiB,MAAAA,IAAI,EAAE;AAHa,KAArB;AAMA,UAAMC,OAAO,GAAG,EACd,GAAGF,WADW;AAEdL,MAAAA,SAAS,EAAEf,GAAG,CAACgB,MAAJ,CAAWH,YAAX,EAAyBX,MAAzB;AAFG,KAAhB;AAKAD,IAAAA,KAAK,CAACsB,IAAN,CAAWD,OAAX;AAEAf,IAAAA,OAAO,CAAC;AACNE,MAAAA,IAAI,EAAE;AACJK,QAAAA,IAAI,EAAEQ,OAAO,CAACR,IADV;AAEJV,QAAAA,KAAK,EAAEkB,OAAO,CAAClB,KAFX;AAGJa,QAAAA,WAAW,EAAE;AAHT,OADA;AAMNC,MAAAA,KAAK,EAAEI,OAAO,CAACP;AANT,KAAD,CAAP;AAQD,GAxBS,EAwBP,GAxBO,CAAV;AAyBD,CA5BD,CADK;AA+BP,OAAO,MAAMS,OAAO,GAAG,MACrB,IAAIlB,OAAJ,CAAaC,OAAD,IAAa;AACvB,SAAOI,UAAU,CAAC,MAAMJ,OAAO,EAAd,EAAkB,GAAlB,CAAjB;AACD,CAFD,CADK","sourcesContent":["import jwt from \"jwt-simple\";\n\nconst users = [];\n\nconst SECRET = \"react_is_amazing\";\n\nexport const signIn = ({ email, password }) =>\n  new Promise((resolve, reject) => {\n    const user = users.find((user) => user.email === email);\n\n    setTimeout(() => {\n      if (!user) {\n        reject({ message: \"User does not exist!\" });\n        return;\n      }\n\n      if (user.password !== password) {\n        reject({ message: \"Invalid password!\" });\n        return;\n      }\n\n      const tokenContent = { name: user.name, email: user.email };\n\n      user.jwt_token = jwt.encode(tokenContent, SECRET);\n\n      resolve({\n        user: {\n          name: user.name,\n          email: user.email,\n          permissions: \"admin\",\n        },\n        token: user.jwt_token,\n      });\n    }, 300);\n  });\n\nexport const createUser = (credentials) =>\n  new Promise((resolve, reject) => {\n    const user = users.find((user) => user.email === credentials.email);\n\n    setTimeout(() => {\n      if (user) reject({ message: \"User already exists!\" });\n\n      const tokenContent = {\n        name: credentials.name,\n        email: credentials.email,\n        role: \"admin\",\n      };\n\n      const newUser = {\n        ...credentials,\n        jwt_token: jwt.encode(tokenContent, SECRET),\n      };\n\n      users.push(newUser);\n\n      resolve({\n        user: {\n          name: newUser.name,\n          email: newUser.email,\n          permissions: \"admin\",\n        },\n        token: newUser.jwt_token,\n      });\n    }, 300);\n  });\n\nexport const signOut = () =>\n  new Promise((resolve) => {\n    return setTimeout(() => resolve(), 300);\n  });\n"]},"metadata":{},"sourceType":"module"}