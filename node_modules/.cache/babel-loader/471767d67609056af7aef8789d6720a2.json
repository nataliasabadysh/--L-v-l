{"ast":null,"code":"var _jsxFileName = \"/Users/nataliasabadysh/Desktop/ReactLessons/lesson3/src/pages/LogIn/LogIn.js\",\n    _s = $RefreshSig$();\n\n// Core\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport { routers } from \"../../utils/routes\"; // Instruments\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { Typography } from \"@mui/material\";\nimport { logInUserAsync } from \"../../redux/auth/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  password: yup.string(\"Enter your name\").required(\"Name is required\"),\n  email: yup.string(\"Enter your email\").email(\"Enter a valid email\").required(\"Email is required\")\n});\n\nconst LogIn = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(state => state.auth.errorLogIn);\n  const formik = useFormik({\n    initialValues: {\n      email: \"nata@gmail.com\",\n      password: \"12345678\"\n    },\n    validationSchema: validationSchema,\n    onSubmit: async values => {\n      console.log(values);\n      dispatch(logInUserAsync(values));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      children: \" Log in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), errorMessage && errorMessage.message && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid red\",\n        padding: 10,\n        margin: 20\n      },\n      children: [errorMessage.message, /*#__PURE__*/_jsxDEV(Link, {\n        to: routers.SINGUP.path,\n        children: \" Go to Sing Up page \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"password\",\n        name: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        value: formik.values.password,\n        onChange: formik.handleChange,\n        error: formik.touched.password && Boolean(formik.errors.password),\n        helperText: formik.touched.password && formik.errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"email\",\n        name: \"email\",\n        label: \"Email\",\n        value: formik.values.email,\n        onChange: formik.handleChange,\n        error: formik.touched.email && Boolean(formik.errors.email),\n        helperText: formik.touched.email && formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        disabled: formik.isSubmitting,\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        style: {\n          marginTop: 20\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LogIn, \"z2XGVb7TBA9BsUX6sbPUW9pGWns=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = LogIn;\nexport default LogIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogIn\");","map":{"version":3,"sources":["/Users/nataliasabadysh/Desktop/ReactLessons/lesson3/src/pages/LogIn/LogIn.js"],"names":["React","useFormik","yup","Link","routers","TextField","Button","Typography","logInUserAsync","useDispatch","useSelector","validationSchema","object","password","string","required","email","LogIn","dispatch","errorMessage","state","auth","errorLogIn","formik","initialValues","onSubmit","values","console","log","message","border","padding","margin","SINGUP","path","handleSubmit","handleChange","touched","Boolean","errors","isSubmitting","marginTop"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,oBAAxB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,MAAMC,gBAAgB,GAAGT,GAAG,CAACU,MAAJ,CAAW;AAClCC,EAAAA,QAAQ,EAAEX,GAAG,CAACY,MAAJ,CAAW,iBAAX,EAA8BC,QAA9B,CAAuC,kBAAvC,CADwB;AAElCC,EAAAA,KAAK,EAAEd,GAAG,CACPY,MADI,CACG,kBADH,EAEJE,KAFI,CAEE,qBAFF,EAGJD,QAHI,CAGK,mBAHL;AAF2B,CAAX,CAAzB;;AAQA,MAAME,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,YAAY,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,UAAvB,CAAhC;AAGA,QAAMC,MAAM,GAAGtB,SAAS,CAAC;AACvBuB,IAAAA,aAAa,EAAE;AACbR,MAAAA,KAAK,EAAE,gBADM;AAEbH,MAAAA,QAAQ,EAAE;AAFG,KADQ;AAKvBF,IAAAA,gBAAgB,EAAEA,gBALK;AAMvBc,IAAAA,QAAQ,EAAE,MAAOC,MAAP,IAAkB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAR,MAAAA,QAAQ,CAACV,cAAc,CAACkB,MAAD,CAAf,CAAR;AACD;AATsB,GAAD,CAAxB;AAYA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAGGP,YAAY,IAAIA,YAAY,CAACU,OAA7B,iBACC;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,eAAV;AAA2BC,QAAAA,OAAO,EAAE,EAApC;AAAwCC,QAAAA,MAAM,EAAE;AAAhD,OAAZ;AAAA,iBACGb,YAAY,CAACU,OADhB,eAEE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAEzB,OAAO,CAAC6B,MAAR,CAAeC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAUE;AAAM,MAAA,QAAQ,EAAEX,MAAM,CAACY,YAAvB;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAC,UAJR;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,KAAK,EAAEZ,MAAM,CAACG,MAAP,CAAcb,QANvB;AAOE,QAAA,QAAQ,EAAEU,MAAM,CAACa,YAPnB;AAQE,QAAA,KAAK,EAAEb,MAAM,CAACc,OAAP,CAAexB,QAAf,IAA2ByB,OAAO,CAACf,MAAM,CAACgB,MAAP,CAAc1B,QAAf,CAR3C;AASE,QAAA,UAAU,EAAEU,MAAM,CAACc,OAAP,CAAexB,QAAf,IAA2BU,MAAM,CAACgB,MAAP,CAAc1B;AATvD;AAAA;AAAA;AAAA;AAAA,cADF,eAaE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,KAAK,EAAC,OAJR;AAKE,QAAA,KAAK,EAAEU,MAAM,CAACG,MAAP,CAAcV,KALvB;AAME,QAAA,QAAQ,EAAEO,MAAM,CAACa,YANnB;AAOE,QAAA,KAAK,EAAEb,MAAM,CAACc,OAAP,CAAerB,KAAf,IAAwBsB,OAAO,CAACf,MAAM,CAACgB,MAAP,CAAcvB,KAAf,CAPxC;AAQE,QAAA,UAAU,EAAEO,MAAM,CAACc,OAAP,CAAerB,KAAf,IAAwBO,MAAM,CAACgB,MAAP,CAAcvB;AARpD;AAAA;AAAA;AAAA;AAAA,cAbF,eAwBE,QAAC,MAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,QAAQ,EAAEO,MAAM,CAACiB,YAFnB;AAGE,QAAA,OAAO,EAAC,WAHV;AAIE,QAAA,SAAS,MAJX;AAKE,QAAA,IAAI,EAAC,QALP;AAME,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD,CAjED;;GAAMxB,K;UACaR,W,EACIC,W,EAGNT,S;;;KALXgB,K;AAmEN,eAAeA,KAAf","sourcesContent":["// Core\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport { routers } from \"../../utils/routes\";\n\n// Instruments\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { Typography } from \"@mui/material\";\nimport { logInUserAsync } from \"../../redux/auth/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst validationSchema = yup.object({\n  password: yup.string(\"Enter your name\").required(\"Name is required\"),\n  email: yup\n    .string(\"Enter your email\")\n    .email(\"Enter a valid email\")\n    .required(\"Email is required\"),\n});\n\nconst LogIn = () => {\n  const dispatch = useDispatch();\n  const errorMessage = useSelector((state) => state.auth.errorLogIn);\n\n  \n  const formik = useFormik({\n    initialValues: {\n      email: \"nata@gmail.com\",\n      password: \"12345678\",\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values) => {\n      console.log(values);\n      dispatch(logInUserAsync(values));\n    },\n  });\n\n  return (\n    <div>\n      <Typography variant=\"h3\"> Log in</Typography>\n\n      {errorMessage && errorMessage.message && (\n        <div style={{ border: \"1px solid red\", padding: 10, margin: 20 }}>\n          {errorMessage.message}\n          <Link to={routers.SINGUP.path}> Go to Sing Up page </Link>\n        </div>\n      )}\n\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          fullWidth\n          id=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n\n        <TextField\n          fullWidth\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n\n        <Button\n          color=\"primary\"\n          disabled={formik.isSubmitting}\n          variant=\"contained\"\n          fullWidth\n          type=\"submit\"\n          style={{ marginTop: 20 }}\n        >\n          Submit\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default LogIn;\n"]},"metadata":{},"sourceType":"module"}